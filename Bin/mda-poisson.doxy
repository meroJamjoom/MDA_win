// -*- Mode: c++ -*-

/** \addtogroup Programs
 ** \{
 **/

/**
   \page mda-poisson mda-poisson
   
   Solves the Poisson equation with specified boundary conditions. \n
   I.e. Given \f$ f\ ,\ g\f$ : \f$\mathbf{R}^n\rightarrow\mathbf{R}\f$, hyperprism \f$\mathbf{R}\f$, finds the scalar field \f$I\f$ such that \n
   \f[ \left \{ \begin{array}{c l}
   \nabla^2I(\vec{x}) = f(\vec{x}) & : \forall \vec{x} \in \mathbf{R} \setminus \delta \mathbf{R}\\
   \nabla I(\vec{x})\cdot\mathbf{\vec{n}}  = 0\, \textrm{or}\, I(\vec{x}) = g(\vec{x}) & : \forall \vec{x} \in \delta \mathbf{R}
   \end{array}
   \right.
   \f]
   
   Notes: 
     - maximum supported array dimension is 8.
     - value of scalar field I must be specified on at least one edge in each dimension for the solution to be defined uniquely (otherwise, the problem is ill posed).
     - when a mask is NOT defined, the boundary condition is second-type (Neumann) boundary condition, ie, gradient=0 at the border. For first-type (Dirichlet)
     condition, a mask is needed, with gradient constraints set (i.e., mask value=-1 at the border pixels, see below).
   
   \code
   mda-poisson <options>
   \endcode
   
   \param "--channel-list | -cl <channels>" Channel list of gradients, if gradient constraints or generated divergence potential are used.
 
   \param "--type | -t <type>" 	Output data type. Default is the same as the input array
   
   \param "--constraint | -cons" Channel specifying pixel values (values at value constrained pixels need only be specified).
   
   \param "--target" Output channel. Default is a new channel.

   \param "--multigrid | -mg" Multigrid solution. 

   \param "--numiter | -n" max number of iterations at the finest level (i.e., full size)

   \param "--gamma | -g" Gamma option - this variable controls how many iteration of CG are performed before downsampling the system to a lower resolution for solving.
   
   \param "--thresh | -t" Amount of error we are willing to tolerate before terminating conjugate gradient solving; by default this value is set to (number of unknowns)*(1.0/256.0)^2.
   
   Note: one and only one of the following 3 options must be provided (if more than one are provided, only one will be used).
   \param "--source | -s <channel>" Channel with scalar source (\f$f(\vec{x})\f$ in equations above ) 
   
   \param "--const-source | -cs <value>" Specifies a constant source value (\f$f(\vec{x}) = <value>\ \ \forall\vec{x}\in\mathbf{R}\f$ )

   \param "--use-div | -div" Uses the divergence of the provided gradient field as the source function (\f$f(\vec{x}) = div( \vec{G}(\vec{x}) )\f$ ). Default option.
   
   Note: one and only one of the following 2 options must be provided (if more than one are provided, only one will be used)
   
   \param "--mask" Channel for describing pixel constraints. Pixels constrained according to the following criteria. 
   	- = 1: unconstrained
   	- = 0: value constrained
   	- = -1: gradient contrained (can only occur on boundary pixels or next to value constrained pixels).

   \param "--value-constrained | -vc | --gradient-constrained | -gc" Automatically generate a mask channel which specifies that pixel values / gradients be constrained on the boundary. Default option.
  
   	

   Example
   \code
   mda-poisson gradients.mda -cl 0,1 --mask 2 --constraint 3
   \endcode
   
   Can be used to find a scalar valued function with gradients closest to the provided gradient field in the least squares sense. \n
   I.e. Given \f$ G : \mathbf{R}^n\rightarrow\mathbf{R}^n \f$, finds \f$I\f$ such that the integral 
   \f$ \int\limits_\mathbf{R} \left|\nabla I - G\right|^2dV \f$ is minimized
   
   
   \section complexity Arithmetic Complexity
   O(N^1.5), where N is the number of pixels in the array
   

   \section memory Memory Consumption
   O(N), where N is the number of pixels in the array
   
   
   
   <hr>
*/

/** \} */
