// -*- Mode: c++ -*-

/**
   \page Filters Filters
   
   This page describes basic handling of filters.
   
   \section overview Overview
   
   Any operation on an MDA::Array that does not change the size of the
   array or the number of channels can be expressed as a
   filter. Filters can be selectively applied to certain channels and
   axes. Filters support a number of modes for dealing with array
   boundaries. All filters are subclasses of the abstract baseclass
   MDA::Filter.
   
   If a commandline interface requires the user to select a filter,
   the filter should usually be generated by a MDA::FilterFactory.
   
   The filter directory also contains the class MDA::Filter1D and its
   subclasses. Note that these classes are not derived from
   MDA::Filter, since they can only deal with one axis at a time. To
   create a MDA::Filter from a MDA::Filter1D, use the
   MDA::SeparableFilter class.
   
   \section filters Supported Filters
   \anchor filterlist
   
   Currently, the following filter names are recognized by
   MDA:FilterFactory.
   
   - bilateral (MDA::BilateralFilter): naive implementation of
     bilateral filters. <b>Very slow for large filter kernels</b>
     (requires sigma, edge stopping sigma, optionally radius)
     
   - bilateralgrid (MDA::BilateralGrid): an implementation of Chen et
     al.'s bilateral grid.  <b>Very large memory consumption for small
     filter kernels and multi-channel data</b>. (requires sigma, edge
     stopping sigma, optionally radius)

   - box (MDA::SeparableFilter, MDA::BoxFilter1D): a separable box
     filter (radius)

   - connectedcomponent (MDA::ConnectedComponent): a connected
     component filter. Any connected components with same
     0<pixel_value<1 will receive component numbers 1
     onwards. Note the values need to be strictly less than 1. 
     <b>Note:</b> special case, when input has only 0's and
     1's, the filter does not execute.
   
   - corner (MDA::ImprovedHarrisCorner): an improved version of the
     Harris corner detector, with better localization. Corners are the
     local maxima in the result channel. Not all parmeters are exposed
     on the commandline at this point.
     
   - dilate (MDA::SeparableFilter, MDA::Dilate1D): separable
     morphological dilation (radius)
   
   - edge (MDA::SimpleEdgeFilter): a simple edge detector (radius)

   - erode (MDA::SeparableFilter, MDA::Erode1D): separable
     morphological erosion (radius)

   - extrema (MDA::ExtremaDetector): finds extrema in a local
     neighborhood. MAxima receive a result value of 1, minima a value
     of 0. All other pixels get a value of 0.5.
   
   - fastgauss (MDA::SeparableFilter, MDA::FastGaussian1D): a
     separable fast recursive Gaussian (requires sigma)

   - firstderiv (MDA::SeparableFilter, MDA::FirstDerivative1D): a
     first derivative filter, only makes sense on one axis at a time
     (radius)

   - floodfill (MDA::FloodFill): an n-dimensional floodfill. Requires
     a mask channel to be provided as the last channel. (no parameters)
     <b>Note:</b> 1. seeds need to be integers, fractions
     seem to fail. 2. mask should have 0/1 values, and needs to be "inverted". 
     Floodfill fills in spaces where mask==0 with the seed values.
     
   - gauss (MDA::SeparableFilter, MDA::Gaussian1D): a separable
     Gaussian filter (requires sigma, optionally radius)

   - hat (MDA::SeparableFilter, MDA::HatFilter1D): a separable
     piecewise linear hat function (radius)
     
   - hitmiss (MDA::HitOrMiss2D): 2D hit-or-miss operator. Requires
     exactly 9 filter values representing a 3x3 structuring element,
     where a value >0 correspond to a value of <b>true</b>, a value of
     0 correspods to <b>false</b>, and values <0 mean "don't care".

   - LoG (MDA::SeparableFilter, MDA::LaplacianOfGaussian1D): Laplacian
     of Gaussian (requires sigma, optionally radius)

   - median (MDA::MedianFilter): Median filter (radius)

   - prune (MDA::HitOrMiss2D): a morphological pruning operator (no
     parameters) in 2D
   
   - secondderiv (MDA::SeparableFilter, MDA::SecondDerivative1D): a
     second derivative filter, only makes sense on one axis at a time
     (radius)
     
   - separable (MDA::SeparableFilter, MDA::Linear1DFilter): an
     arbitrary, linear separable filter with user-specified weights
     
   - sobel (MDA::SobelFilter): a Sobel edge detection filter (no
     parameters)
     
   - thin (MDA::Thinning2D): a morphological thinning operator in 2D.

   - unsharpmask (MDA::UnsharpMasking); an unsharp-masking filter
     (requires sigma, optionallry radius)
   
   - thinvoxel (MDA::Thinning3D): a morphological thinning operator in 3D.

   <hr>
*/
